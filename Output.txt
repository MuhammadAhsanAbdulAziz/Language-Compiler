(ACCESS_MODIFIERS, "public" ,1)
(KEYWORDS, "class" ,1)
(IDENTIFIER, "Test" ,1)
(TERMINATORS, "(" ,1)
(IDENTIFIER, "abc" ,1)
(TERMINATORS, ")" ,1)
(TERMINATORS, "{" ,1)
(ACCESS_MODIFIERS, "public" ,3)
(IDENTIFIER, "Test" ,3)
(TERMINATORS, "(" ,3)
(KEYWORDS, "var" ,3)
(IDENTIFIER, "abc" ,3)
(TERMINATORS, ":" ,3)
(DT, "Number" ,3)
(Invalid Lexene, "," ,3)
(KEYWORDS, "var" ,3)
(IDENTIFIER, "abc" ,3)
(TERMINATORS, ":" ,3)
(DT, "Word" ,3)
(TERMINATORS, ")" ,3)
(TERMINATORS, ";" ,3)
(ACCESS_MODIFIERS, "public" ,5)
(TERMINATORS, "~" ,5)
(IDENTIFIER, "Test" ,5)
(TERMINATORS, "(" ,5)
(TERMINATORS, ")" ,5)
(TERMINATORS, ";" ,5)
(ACCESS_MODIFIERS, "public" ,7)
(KEYWORDS, "var" ,7)
(IDENTIFIER, "abc" ,7)
(TERMINATORS, ":" ,7)
(DT, "Number" ,7)
(TERMINATORS, ";" ,7)
(ACCESS_MODIFIERS, "public" ,11)
(KEYWORDS, "void" ,11)
(IDENTIFIER, "sampleFunction" ,11)
(TERMINATORS, "=>" ,11)
(TERMINATORS, "(" ,11)
(KEYWORDS, "var" ,11)
(IDENTIFIER, "a" ,11)
(TERMINATORS, ":" ,11)
(DT, "Number" ,11)
(TERMINATORS, ")" ,11)
(TERMINATORS, "{" ,11)
(KEYWORDS, "var" ,12)
(IDENTIFIER, "a" ,12)
(TERMINATORS, ":" ,12)
(DT, "Number" ,12)
(TERMINATORS, "[" ,12)
(Number, "2" ,12)
(TERMINATORS, "]" ,12)
(TERMINATORS, "[" ,12)
(Number, "2" ,12)
(TERMINATORS, "]" ,12)
(TERMINATORS, "{" ,12)
(Number, "2" ,12)
(Invalid Lexene, "," ,12)
(Number, "3" ,12)
(TERMINATORS, "}" ,12)
(TERMINATORS, "{" ,12)
(Word, "amir" ,12)
(Invalid Lexene, "," ,12)
(Word, "chota" ,12)
(TERMINATORS, "}" ,12)
(TERMINATORS, ";" ,12)
(TERMINATORS, "}" ,13)
(TERMINATORS, "}" ,14)
(IDENTIFIER, "abstract" ,16)
(ACCESS_MODIFIERS, "private" ,16)
(KEYWORDS, "class" ,16)
(IDENTIFIER, "Test" ,16)
(TERMINATORS, "(" ,16)
(IDENTIFIER, "abc" ,16)
(TERMINATORS, ")" ,16)
(TERMINATORS, "{" ,16)
(ACCESS_MODIFIERS, "public" ,18)
(IDENTIFIER, "Test" ,18)
(TERMINATORS, "(" ,18)
(KEYWORDS, "var" ,18)
(IDENTIFIER, "abc" ,18)
(TERMINATORS, ":" ,18)
(DT, "Number" ,18)
(Invalid Lexene, "," ,18)
(KEYWORDS, "var" ,18)
(IDENTIFIER, "abc" ,18)
(TERMINATORS, ":" ,18)
(DT, "Word" ,18)
(TERMINATORS, ")" ,18)
(TERMINATORS, ";" ,18)
(ACCESS_MODIFIERS, "public" ,20)
(TERMINATORS, "~" ,20)
(IDENTIFIER, "Test" ,20)
(TERMINATORS, "(" ,20)
(TERMINATORS, ")" ,20)
(TERMINATORS, ";" ,20)
(ACCESS_MODIFIERS, "public" ,22)
(KEYWORDS, "var" ,22)
(IDENTIFIER, "abc" ,22)
(TERMINATORS, ":" ,22)
(DT, "Number" ,22)
(TERMINATORS, ";" ,22)
(ACCESS_MODIFIERS, "public" ,26)
(KEYWORDS, "void" ,26)
(IDENTIFIER, "sampleFunction" ,26)
(TERMINATORS, "=>" ,26)
(TERMINATORS, "(" ,26)
(KEYWORDS, "var" ,26)
(IDENTIFIER, "a" ,26)
(TERMINATORS, ":" ,26)
(DT, "Number" ,26)
(TERMINATORS, ")" ,26)
(TERMINATORS, "{" ,26)
(KEYWORDS, "var" ,27)
(IDENTIFIER, "a" ,27)
(TERMINATORS, ":" ,27)
(DT, "Number" ,27)
(TERMINATORS, "[" ,27)
(Number, "2" ,27)
(TERMINATORS, "]" ,27)
(TERMINATORS, "[" ,27)
(Number, "2" ,27)
(TERMINATORS, "]" ,27)
(TERMINATORS, "{" ,27)
(Number, "2" ,27)
(Invalid Lexene, "," ,27)
(Number, "3" ,27)
(TERMINATORS, "}" ,27)
(TERMINATORS, "{" ,27)
(Word, "amir" ,27)
(Invalid Lexene, "," ,27)
(Word, "chota" ,27)
(TERMINATORS, "}" ,27)
(TERMINATORS, ";" ,27)
(TERMINATORS, "}" ,28)
(TERMINATORS, "}" ,29)
(ACCESS_MODIFIERS, "public" ,31)
(KEYWORDS, "class" ,31)
(KEYWORDS, "Program" ,31)
(TERMINATORS, "{" ,32)
(KEYWORDS, "void" ,33)
(IDENTIFIER, "sampleFunction" ,33)
(TERMINATORS, "=>" ,33)
(TERMINATORS, "(" ,33)
(KEYWORDS, "var" ,33)
(IDENTIFIER, "a" ,33)
(TERMINATORS, ":" ,33)
(DT, "Number" ,33)
(TERMINATORS, ")" ,33)
(TERMINATORS, "{" ,33)
(TERMINATORS, "}" ,35)
(KEYWORDS, "void" ,37)
(IDENTIFIER, "sampleFunction" ,37)
(TERMINATORS, "=>" ,37)
(TERMINATORS, "(" ,37)
(KEYWORDS, "var" ,37)
(IDENTIFIER, "a" ,37)
(TERMINATORS, ":" ,37)
(DT, "Number" ,37)
(Invalid Lexene, "," ,37)
(KEYWORDS, "var" ,37)
(IDENTIFIER, "a" ,37)
(TERMINATORS, ":" ,37)
(DT, "Word" ,37)
(TERMINATORS, ")" ,37)
(TERMINATORS, "{" ,37)
(TERMINATORS, "}" ,39)
(DT, "Number" ,41)
(IDENTIFIER, "sampleFunction" ,41)
(TERMINATORS, "=>" ,41)
(TERMINATORS, "(" ,41)
(TERMINATORS, ")" ,41)
(TERMINATORS, "{" ,41)
(TERMINATORS, "}" ,43)
(KEYWORDS, "main" ,45)
(TERMINATORS, "=>" ,45)
(TERMINATORS, "(" ,45)
(TERMINATORS, ")" ,45)
(TERMINATORS, "{" ,46)
(KEYWORDS, "var" ,48)
(IDENTIFIER, "a" ,48)
(TERMINATORS, ":" ,48)
(DT, "Number" ,48)
(TERMINATORS, "[" ,48)
(Number, "2" ,48)
(TERMINATORS, "]" ,48)
(TERMINATORS, "[" ,48)
(Number, "2" ,48)
(TERMINATORS, "]" ,48)
(TERMINATORS, "{" ,48)
(Number, "2" ,48)
(Invalid Lexene, "," ,48)
(Number, "3" ,48)
(TERMINATORS, "}" ,48)
(TERMINATORS, "{" ,48)
(Word, "amir" ,48)
(Invalid Lexene, "," ,48)
(Word, "chota" ,48)
(TERMINATORS, "}" ,48)
(TERMINATORS, ";" ,48)
(IDENTIFIER, "a" ,50)
(INC_DEC, "++" ,50)
(TERMINATORS, ";" ,50)
(KEYWORDS, "if" ,52)
(TERMINATORS, "(" ,52)
(IDENTIFIER, "num" ,52)
(ARITHMATIC_OPERATORS, "%" ,52)
(Number, "2" ,52)
(RELATIONAL_OPERATORS, "==" ,52)
(Number, "0" ,52)
(TERMINATORS, ")" ,52)
(TERMINATORS, "{" ,52)
(IDENTIFIER, "a" ,53)
(ASSIGN_OPERATORS, "=" ,53)
(Word, "ahsan" ,53)
(TERMINATORS, ";" ,53)
(TERMINATORS, "}" ,54)
(KEYWORDS, "if_not" ,55)
(TERMINATORS, "(" ,55)
(IDENTIFIER, "zain" ,55)
(TERMINATORS, ")" ,55)
(TERMINATORS, "{" ,55)
(IDENTIFIER, "hello" ,56)
(ASSIGN_OPERATORS, "=" ,56)
(KEYWORDS, "true" ,56)
(TERMINATORS, ";" ,56)
(TERMINATORS, "}" ,57)
(KEYWORDS, "do_this" ,58)
(TERMINATORS, "{" ,58)
(KEYWORDS, "var" ,59)
(IDENTIFIER, "a" ,59)
(TERMINATORS, ":" ,59)
(DT, "Number" ,59)
(ASSIGN_OPERATORS, "=" ,59)
(Word, "Ahsan" ,59)
(TERMINATORS, ";" ,59)
(TERMINATORS, "}" ,60)
(KEYWORDS, "looping_till" ,62)
(TERMINATORS, "(" ,62)
(IDENTIFIER, "i" ,62)
(RELATIONAL_OPERATORS, "<" ,62)
(Number, "10" ,62)
(TERMINATORS, ")" ,62)
(TERMINATORS, "{" ,62)
(KEYWORDS, "var" ,63)
(IDENTIFIER, "a" ,63)
(TERMINATORS, ":" ,63)
(DT, "Number" ,63)
(ASSIGN_OPERATORS, "=" ,63)
(IDENTIFIER, "a" ,63)
(ARITHMATIC_OPERATORS, "+" ,63)
(IDENTIFIER, "b" ,63)
(ARITHMATIC_OPERATORS, "*" ,63)
(Number, "2." ,63)
(TERMINATORS, ";" ,63)
(IDENTIFIER, "a" ,64)
(ASSIGN_OPERATORS, "=" ,64)
(Number, "2" ,64)
(ARITHMATIC_OPERATORS, "+" ,64)
(Number, "3" ,64)
(ARITHMATIC_OPERATORS, "*" ,64)
(IDENTIFIER, "b" ,64)
(TERMINATORS, "[" ,64)
(Number, "3" ,64)
(TERMINATORS, "]" ,64)
(ARITHMATIC_OPERATORS, "%" ,64)
(Number, "2" ,64)
(TERMINATORS, ";" ,64)
(TERMINATORS, "}" ,65)
(TERMINATORS, "}" ,66)
(DT, "Number" ,68)
(IDENTIFIER, "sampleFunction" ,68)
(TERMINATORS, "=>" ,68)
(TERMINATORS, "(" ,68)
(TERMINATORS, ")" ,68)
(TERMINATORS, "{" ,68)
(TERMINATORS, "}" ,70)
(KEYWORDS, "void" ,72)
(IDENTIFIER, "sampleFunction" ,72)
(TERMINATORS, "=>" ,72)
(TERMINATORS, "(" ,72)
(KEYWORDS, "var" ,72)
(IDENTIFIER, "a" ,72)
(TERMINATORS, ":" ,72)
(DT, "Number" ,72)
(Invalid Lexene, "," ,72)
(KEYWORDS, "var" ,72)
(IDENTIFIER, "a" ,72)
(TERMINATORS, ":" ,72)
(DT, "Word" ,72)
(TERMINATORS, ")" ,72)
(TERMINATORS, "{" ,72)
(TERMINATORS, "}" ,74)
(TERMINATORS, "}" ,75)
(IDENTIFIER, "sealed" ,77)
(ACCESS_MODIFIERS, "public" ,77)
(KEYWORDS, "class" ,77)
(IDENTIFIER, "Test" ,77)
(TERMINATORS, "(" ,77)
(IDENTIFIER, "abc" ,77)
(TERMINATORS, ")" ,77)
(TERMINATORS, "{" ,77)
(ACCESS_MODIFIERS, "public" ,79)
(IDENTIFIER, "Test" ,79)
(TERMINATORS, "(" ,79)
(KEYWORDS, "var" ,79)
(IDENTIFIER, "abc" ,79)
(TERMINATORS, ":" ,79)
(DT, "Number" ,79)
(Invalid Lexene, "," ,79)
(KEYWORDS, "var" ,79)
(IDENTIFIER, "abc" ,79)
(TERMINATORS, ":" ,79)
(DT, "Word" ,79)
(TERMINATORS, ")" ,79)
(TERMINATORS, ";" ,79)
(ACCESS_MODIFIERS, "public" ,81)
(TERMINATORS, "~" ,81)
(IDENTIFIER, "Test" ,81)
(TERMINATORS, "(" ,81)
(TERMINATORS, ")" ,81)
(TERMINATORS, ";" ,81)
(ACCESS_MODIFIERS, "public" ,83)
(KEYWORDS, "var" ,83)
(IDENTIFIER, "abc" ,83)
(TERMINATORS, ":" ,83)
(DT, "Number" ,83)
(TERMINATORS, ";" ,83)
(ACCESS_MODIFIERS, "public" ,87)
(KEYWORDS, "void" ,87)
(IDENTIFIER, "sampleFunction" ,87)
(TERMINATORS, "=>" ,87)
(TERMINATORS, "(" ,87)
(KEYWORDS, "var" ,87)
(IDENTIFIER, "a" ,87)
(TERMINATORS, ":" ,87)
(DT, "Number" ,87)
(TERMINATORS, ")" ,87)
(TERMINATORS, "{" ,87)
(KEYWORDS, "var" ,88)
(IDENTIFIER, "a" ,88)
(TERMINATORS, ":" ,88)
(DT, "Number" ,88)
(TERMINATORS, "[" ,88)
(Number, "2" ,88)
(TERMINATORS, "]" ,88)
(TERMINATORS, "[" ,88)
(Number, "2" ,88)
(TERMINATORS, "]" ,88)
(TERMINATORS, "{" ,88)
(Number, "2" ,88)
(Invalid Lexene, "," ,88)
(Number, "3" ,88)
(TERMINATORS, "}" ,88)
(TERMINATORS, "{" ,88)
(Word, "amir" ,88)
(Invalid Lexene, "," ,88)
(Word, "chota" ,88)
(TERMINATORS, "}" ,88)
(TERMINATORS, ";" ,88)
(TERMINATORS, "}" ,89)
(TERMINATORS, "}" ,90)
(DT, "Number" ,92)
(IDENTIFIER, "sampleFunction" ,92)
(TERMINATORS, "=>" ,92)
(TERMINATORS, "(" ,92)
(TERMINATORS, ")" ,92)
(TERMINATORS, "{" ,92)
(TERMINATORS, "}" ,94)
(END MARKER, "#" ,95)
